import $ from 'jquery';
console.log("trk load $.message", $.message)

import DataTable from 'datatables.net';
import "datatables.net-buttons-bs4";

import './main.sass'
import '../fontello/css/fontello.css'

import addColumnSearchInputs from "./addColumnSearchInputs"
import addEventListeners from "./addEventListeners"

export function initialise(passedOptions = {}) {
  console.log("trk initialise $.message", $.message)
  // ignore .dataTable (duplicate table element with class dataTable is
  // generated by datatables) to avoid duplicate tables on back button
  $('[data-datatable]:not(.dataTable)').each(function(){
    initialiseOne($(this), { passedOptions: passedOptions } )
  })
}

const initialiseOne = ($table, { isColumnSearch = undefined, passedOptions = {} }) => {
  // when we toggle collumnsearch we need to destroy before addColumnSearchInputs
  $table.DataTable().destroy()
  let options = findOptions($table, passedOptions)
  if (isColumnSearch === undefined) isColumnSearch = $('[data-datatable-search-value][data-datatable-search-value!=""]', $table).length
  if (isColumnSearch) {
    addColumnSearchInputs($table, passedOptions)
  } else {
    addLabels($table)
  }

  // here we actually initialise Datatable
  let datatable = $table.DataTable(options)

  if ($table.data('datatableAjaxUrl')) {
    // this is serverside table so we can saveLength and saveOrder on server
  } else {
    // for client side we will use another ajax to save preferences
    saveLength($table)
    saveOrder($table)
  }
  if (isColumnSearch) addEventListeners(datatable, options)
  // **adjust** fix https://datatables.net/forums/discussion/43912
  setTimeout(function() { datatable.columns.adjust() }, 0)
  addIconGlobalSearch($table, isColumnSearch, passedOptions)
}

function findOptions($table, passedOptions) {
  let dom = $table.data('datatableDom') || '<"trk-global-search-wrapper"f>rtp<"trk-move-up"il>'
  let order = $table.data('datatableOrder') || [[0, 'desc']]
  let pageLength = $table.data('datatablePageLength') || 10
  let options = {
    // scrollY: "55vh", do not use Y scroll and show all items on a page
    scrollX: true, // this will introduce some misallignment between header and columns
    autoWidth: false, // with this option, body is full with but header stays original
    // so we need to use fix for **adjust** (note that if bootstrap styles is
    // loaded using spockets, header has 100% width)
    scrollCollapse: true,
    dom: dom,
    order: order,
    pageLength: pageLength,
    destroy: true, // this is needed when we enable/disable column search
  }
  let optionsAjax = {}
  if ($table.data('datatableAjaxUrl')) {
    let ajaxUrl = $table.data('datatableAjaxUrl')
    let totalLength = $table.data('datatableTotalLength')
    optionsAjax = {
      searchDelay: 500,
      processing: true,
      serverSide: true,
      deferLoading: totalLength,
      ajax: {
        url: ajaxUrl,
        type: 'POST',
        error: (xhr, message, error) => {
          let msg = `Ajax error. Please refresh the page. ${error}.`
          if (typeof xhr != 'undefined' && typeof xhr.responseJSON != 'undefined') {
            msg += ` ${xhr.responseJSON['error']}`
          }
          flash_alert(msg)
        },
      },
    }
  }
  let optionsColumnDefs = {}
  $('thead th', $table).each(function(index) {
    if ($(this).data('datatableHiddenColumn')) {
      if (!optionsColumnDefs["columnDefs"]) optionsColumnDefs["columnDefs"] = [{"targets": [], visible: false}]
      optionsColumnDefs["columnDefs"][0]['targets'].push(index)
    }
  })

  return {
    ...options,
    ...optionsAjax,
    ...optionsColumnDefs,
    ...passedOptions,
    language: {
      processing: `<i class="demo-icon trk-icon-spinner trk-spin"
            style="font-size:24px"></i> Processing...`,
      ...passedOptions.language,
    },
    // https://datatables.net/forums/discussion/comment/159119/#Comment_159119
    initComplete: function() {
      var api = this.api();
      $('.dataTables_filter input', $table)
        .off() // remove default search api call and append delayed
        .on('input', (delay(function () { // Bind our desired behavior
          console.log(`api ${$(this).val()}`)
          api.search($(this).val()).draw();
          return;
        }, 1000))); // Set delay in milliseconds

      function delay(callback, ms) {
        var timer = 0;
        return function () {
          var context = this, args = arguments;
          clearTimeout(timer);
          timer = setTimeout(function () {
            callback.apply(context, args);
          }, ms || 0);
        };
      }
    },
  }
}

function addLabels($table) {
  $('thead th', $table).each(function() {
    let original_text = $(this).data('original-text')
    if (original_text)
      $(this).html(original_text)
  })
}

function addIconGlobalSearch($table, isColumnSearch, passedOptions) {
  let icon = isColumnSearch ? 'trk-icon-table' : 'trk-icon-grid'
  $('.trk-global-search-wrapper label').append(`<div class='trk-global-search-icon-wrapper'><button class='trk-global-search-button'><i class='demo-icon ${icon}' aria-hidden='true'></i></button></div>`)
  $('.trk-global-search-icon-wrapper').click(function() {
    if (isColumnSearch) {
      initialiseOne($table, { isColumnSearch: false, passedOptions: passedOptions })
    } else {
      initialiseOne($table, { isColumnSearch: true, passedOptions: passedOptions })
    }
  })
}

function savePreference(data) {
  $.ajax({
    url: '/my-profile/preferences',
    method: 'POST',
    data: { preference_name: "datatable_preference", preference_value: data },
    dataType: "json",
    success: function(data, status) {
      console.log(`data-user-preferences ${status}`)
    }
  })
}

function saveLength(table) {
  table.on('length.dt', function( e, settings, len ) {
    let name = $(this).data().datatableName
    let data = { [name]: { page_length: parseInt(len) } }
    savePreference(data)
  })
}

function saveOrder(table) {
  table.on('order.dt', function( e, settings, order ) {
    let name = $(this).data().datatableName
    let direction = order[0].dir
    let column_index = order[0].col
    let data = { [name]: { direction: direction, column_index: column_index } }
    savePreference(data)
  })
}

function flash_alert(msg) {
  alert(msg)
}
